apiVersion: apps/v1
kind: Deployment # 오브젝트 타입
metadata: # 오브젝트를 유일하게 식별하기 위한 정보
  name: my-app # 오브젝트 이름
  annotations:
    kubernetes.io/change-cause: "initial image" # 변경 원인에 대한 설명을 제공하는 주석
spec: # 사용자가 원하는 오브젝트의 상태를 정의
  replicas: 1 # pod 복제본의 수
  selector: # 위의 오브젝트에 의해 관리될 Pod를 선택하는 기준
    matchLabels: # 오브젝트에서 다른 오브젝트를 선택하기 위해 사용되는 레이블 선택기
    app: my-app
  template: # 새로운 Pod 인스턴스를 생성하기 위한 템플릿
    metadata: # Pod의 메타데이터
      labels:
        app: my-app  # 생성될 Pod에 레이블 부여
    spec: # 원하는 Pod 상태를 정의
      containers:  # Pod 내에서 실행될 컨테이너 목
        - name: my-app # 컨테이너 이름
          image: krmp-d2hub-idock.9rum.cc/dev-test/repo_469df1259e06 # 도커 이미지 주소
          ports:
            - containerPort: 8080 # 통신에 사용할 컨테이너 포트
          resources: # 컨테이너에 할당된 자원의 제한 및 요청
            limits: # 자원의 최대 제한량
              cpu: 500m # CPU의 최대 사용량을 0.5 코어로 설정
            requests: # 자원의 최소 요청량
              cpu: 200m # CPU의 최소 사용량을 0.2 코어로 설정
          readinessProbe: # Pod의 준비 상태를 체크하는 메커니즘
            httpGet: # HTTP GET 요청을 통한 검사 방법
              path: / # 체크할 URL 경로
              port: 8080 # 체크할 포트
            initialDelaySeconds: 5 # 컨테이너 시작 후 처음으로 준비 상태 검사를 시작하기 전의 대기 시간 (5초)
            periodSeconds: 10 # 준비 상태 검사를 반복하는 주기 (10초)
---
apiVersion: v1
kind: Service # 오브젝트 타입
metadata:
  name: my-app-lb # 오브젝트 이름
spec:
  type: NodePort # 서비스 타입
  selector: # 서비스가 전달하는 트래픽을 받을 파드들을 선택하는 기준
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

